/*
Zibal API

Combined API for Zibal Gateway and Facilities (Verification, Wallet, etc.)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zibal

import (
	"encoding/json"
	"fmt"
)

// checks if the CardToIbanResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardToIbanResponseData{}

// CardToIbanResponseData struct for CardToIbanResponseData
type CardToIbanResponseData struct {
	Name string `json:"name"`
	IBAN string `json:"IBAN"`
	BankName string `json:"bankName"`
	AdditionalProperties map[string]interface{}
}

type _CardToIbanResponseData CardToIbanResponseData

// NewCardToIbanResponseData instantiates a new CardToIbanResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardToIbanResponseData(name string, iBAN string, bankName string) *CardToIbanResponseData {
	this := CardToIbanResponseData{}
	this.Name = name
	this.IBAN = iBAN
	this.BankName = bankName
	return &this
}

// NewCardToIbanResponseDataWithDefaults instantiates a new CardToIbanResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardToIbanResponseDataWithDefaults() *CardToIbanResponseData {
	this := CardToIbanResponseData{}
	return &this
}

// GetName returns the Name field value
func (o *CardToIbanResponseData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CardToIbanResponseData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CardToIbanResponseData) SetName(v string) {
	o.Name = v
}

// GetIBAN returns the IBAN field value
func (o *CardToIbanResponseData) GetIBAN() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IBAN
}

// GetIBANOk returns a tuple with the IBAN field value
// and a boolean to check if the value has been set.
func (o *CardToIbanResponseData) GetIBANOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IBAN, true
}

// SetIBAN sets field value
func (o *CardToIbanResponseData) SetIBAN(v string) {
	o.IBAN = v
}

// GetBankName returns the BankName field value
func (o *CardToIbanResponseData) GetBankName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BankName
}

// GetBankNameOk returns a tuple with the BankName field value
// and a boolean to check if the value has been set.
func (o *CardToIbanResponseData) GetBankNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BankName, true
}

// SetBankName sets field value
func (o *CardToIbanResponseData) SetBankName(v string) {
	o.BankName = v
}

func (o CardToIbanResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardToIbanResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["IBAN"] = o.IBAN
	toSerialize["bankName"] = o.BankName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CardToIbanResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"IBAN",
		"bankName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCardToIbanResponseData := _CardToIbanResponseData{}

	err = json.Unmarshal(data, &varCardToIbanResponseData)

	if err != nil {
		return err
	}

	*o = CardToIbanResponseData(varCardToIbanResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "IBAN")
		delete(additionalProperties, "bankName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCardToIbanResponseData struct {
	value *CardToIbanResponseData
	isSet bool
}

func (v NullableCardToIbanResponseData) Get() *CardToIbanResponseData {
	return v.value
}

func (v *NullableCardToIbanResponseData) Set(val *CardToIbanResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableCardToIbanResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableCardToIbanResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardToIbanResponseData(val *CardToIbanResponseData) *NullableCardToIbanResponseData {
	return &NullableCardToIbanResponseData{value: val, isSet: true}
}

func (v NullableCardToIbanResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardToIbanResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


