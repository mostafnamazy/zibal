/*
Zibal API

Combined API for Zibal Gateway and Facilities (Verification, Wallet, etc.)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zibal

import (
	"encoding/json"
	"fmt"
)

// checks if the BankAccountToIbanResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BankAccountToIbanResponseData{}

// BankAccountToIbanResponseData struct for BankAccountToIbanResponseData
type BankAccountToIbanResponseData struct {
	IBAN string `json:"IBAN"`
	AdditionalProperties map[string]interface{}
}

type _BankAccountToIbanResponseData BankAccountToIbanResponseData

// NewBankAccountToIbanResponseData instantiates a new BankAccountToIbanResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBankAccountToIbanResponseData(iBAN string) *BankAccountToIbanResponseData {
	this := BankAccountToIbanResponseData{}
	this.IBAN = iBAN
	return &this
}

// NewBankAccountToIbanResponseDataWithDefaults instantiates a new BankAccountToIbanResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBankAccountToIbanResponseDataWithDefaults() *BankAccountToIbanResponseData {
	this := BankAccountToIbanResponseData{}
	return &this
}

// GetIBAN returns the IBAN field value
func (o *BankAccountToIbanResponseData) GetIBAN() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IBAN
}

// GetIBANOk returns a tuple with the IBAN field value
// and a boolean to check if the value has been set.
func (o *BankAccountToIbanResponseData) GetIBANOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IBAN, true
}

// SetIBAN sets field value
func (o *BankAccountToIbanResponseData) SetIBAN(v string) {
	o.IBAN = v
}

func (o BankAccountToIbanResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BankAccountToIbanResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["IBAN"] = o.IBAN

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BankAccountToIbanResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"IBAN",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBankAccountToIbanResponseData := _BankAccountToIbanResponseData{}

	err = json.Unmarshal(data, &varBankAccountToIbanResponseData)

	if err != nil {
		return err
	}

	*o = BankAccountToIbanResponseData(varBankAccountToIbanResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "IBAN")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBankAccountToIbanResponseData struct {
	value *BankAccountToIbanResponseData
	isSet bool
}

func (v NullableBankAccountToIbanResponseData) Get() *BankAccountToIbanResponseData {
	return v.value
}

func (v *NullableBankAccountToIbanResponseData) Set(val *BankAccountToIbanResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableBankAccountToIbanResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableBankAccountToIbanResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBankAccountToIbanResponseData(val *BankAccountToIbanResponseData) *NullableBankAccountToIbanResponseData {
	return &NullableBankAccountToIbanResponseData{value: val, isSet: true}
}

func (v NullableBankAccountToIbanResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBankAccountToIbanResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


