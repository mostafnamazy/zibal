/*
Zibal API

Combined API for Zibal Gateway and Facilities (Verification, Wallet, etc.)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zibal

import (
	"encoding/json"
)

// checks if the CheckCardWithNationalCodeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckCardWithNationalCodeResponse{}

// CheckCardWithNationalCodeResponse struct for CheckCardWithNationalCodeResponse
type CheckCardWithNationalCodeResponse struct {
	Result *int32 `json:"result,omitempty"`
	Message *string `json:"message,omitempty"`
	Data *ShahkarInquiryResponseData `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CheckCardWithNationalCodeResponse CheckCardWithNationalCodeResponse

// NewCheckCardWithNationalCodeResponse instantiates a new CheckCardWithNationalCodeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckCardWithNationalCodeResponse() *CheckCardWithNationalCodeResponse {
	this := CheckCardWithNationalCodeResponse{}
	return &this
}

// NewCheckCardWithNationalCodeResponseWithDefaults instantiates a new CheckCardWithNationalCodeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckCardWithNationalCodeResponseWithDefaults() *CheckCardWithNationalCodeResponse {
	this := CheckCardWithNationalCodeResponse{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *CheckCardWithNationalCodeResponse) GetResult() int32 {
	if o == nil || IsNil(o.Result) {
		var ret int32
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckCardWithNationalCodeResponse) GetResultOk() (*int32, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *CheckCardWithNationalCodeResponse) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given int32 and assigns it to the Result field.
func (o *CheckCardWithNationalCodeResponse) SetResult(v int32) {
	o.Result = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CheckCardWithNationalCodeResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckCardWithNationalCodeResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CheckCardWithNationalCodeResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CheckCardWithNationalCodeResponse) SetMessage(v string) {
	o.Message = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CheckCardWithNationalCodeResponse) GetData() ShahkarInquiryResponseData {
	if o == nil || IsNil(o.Data) {
		var ret ShahkarInquiryResponseData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckCardWithNationalCodeResponse) GetDataOk() (*ShahkarInquiryResponseData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CheckCardWithNationalCodeResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given ShahkarInquiryResponseData and assigns it to the Data field.
func (o *CheckCardWithNationalCodeResponse) SetData(v ShahkarInquiryResponseData) {
	o.Data = &v
}

func (o CheckCardWithNationalCodeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckCardWithNationalCodeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CheckCardWithNationalCodeResponse) UnmarshalJSON(data []byte) (err error) {
	varCheckCardWithNationalCodeResponse := _CheckCardWithNationalCodeResponse{}

	err = json.Unmarshal(data, &varCheckCardWithNationalCodeResponse)

	if err != nil {
		return err
	}

	*o = CheckCardWithNationalCodeResponse(varCheckCardWithNationalCodeResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "result")
		delete(additionalProperties, "message")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCheckCardWithNationalCodeResponse struct {
	value *CheckCardWithNationalCodeResponse
	isSet bool
}

func (v NullableCheckCardWithNationalCodeResponse) Get() *CheckCardWithNationalCodeResponse {
	return v.value
}

func (v *NullableCheckCardWithNationalCodeResponse) Set(val *CheckCardWithNationalCodeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckCardWithNationalCodeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckCardWithNationalCodeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckCardWithNationalCodeResponse(val *CheckCardWithNationalCodeResponse) *NullableCheckCardWithNationalCodeResponse {
	return &NullableCheckCardWithNationalCodeResponse{value: val, isSet: true}
}

func (v NullableCheckCardWithNationalCodeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckCardWithNationalCodeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


