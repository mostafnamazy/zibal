/*
Zibal API

Combined API for Zibal Gateway and Facilities (Verification, Wallet, etc.)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zibal

import (
	"encoding/json"
	"fmt"
)

// checks if the WalletCheckoutPlusResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletCheckoutPlusResponseData{}

// WalletCheckoutPlusResponseData struct for WalletCheckoutPlusResponseData
type WalletCheckoutPlusResponseData struct {
	Id string `json:"id"`
	CreatedAt string `json:"createdAt"`
	Amount int32 `json:"amount"`
	Description string `json:"description"`
	Type int32 `json:"type"`
	TransactionId *string `json:"transactionId,omitempty"`
	TransactionOrderId string `json:"transactionOrderId"`
	LedgerId string `json:"ledgerId"`
	AdditionalProperties map[string]interface{}
}

type _WalletCheckoutPlusResponseData WalletCheckoutPlusResponseData

// NewWalletCheckoutPlusResponseData instantiates a new WalletCheckoutPlusResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletCheckoutPlusResponseData(id string, createdAt string, amount int32, description string, type_ int32, transactionOrderId string, ledgerId string) *WalletCheckoutPlusResponseData {
	this := WalletCheckoutPlusResponseData{}
	this.Id = id
	this.CreatedAt = createdAt
	this.Amount = amount
	this.Description = description
	this.Type = type_
	this.TransactionOrderId = transactionOrderId
	this.LedgerId = ledgerId
	return &this
}

// NewWalletCheckoutPlusResponseDataWithDefaults instantiates a new WalletCheckoutPlusResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletCheckoutPlusResponseDataWithDefaults() *WalletCheckoutPlusResponseData {
	this := WalletCheckoutPlusResponseData{}
	return &this
}

// GetId returns the Id field value
func (o *WalletCheckoutPlusResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WalletCheckoutPlusResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WalletCheckoutPlusResponseData) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *WalletCheckoutPlusResponseData) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *WalletCheckoutPlusResponseData) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *WalletCheckoutPlusResponseData) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetAmount returns the Amount field value
func (o *WalletCheckoutPlusResponseData) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *WalletCheckoutPlusResponseData) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *WalletCheckoutPlusResponseData) SetAmount(v int32) {
	o.Amount = v
}

// GetDescription returns the Description field value
func (o *WalletCheckoutPlusResponseData) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *WalletCheckoutPlusResponseData) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *WalletCheckoutPlusResponseData) SetDescription(v string) {
	o.Description = v
}

// GetType returns the Type field value
func (o *WalletCheckoutPlusResponseData) GetType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WalletCheckoutPlusResponseData) GetTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WalletCheckoutPlusResponseData) SetType(v int32) {
	o.Type = v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *WalletCheckoutPlusResponseData) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletCheckoutPlusResponseData) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *WalletCheckoutPlusResponseData) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *WalletCheckoutPlusResponseData) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetTransactionOrderId returns the TransactionOrderId field value
func (o *WalletCheckoutPlusResponseData) GetTransactionOrderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionOrderId
}

// GetTransactionOrderIdOk returns a tuple with the TransactionOrderId field value
// and a boolean to check if the value has been set.
func (o *WalletCheckoutPlusResponseData) GetTransactionOrderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionOrderId, true
}

// SetTransactionOrderId sets field value
func (o *WalletCheckoutPlusResponseData) SetTransactionOrderId(v string) {
	o.TransactionOrderId = v
}

// GetLedgerId returns the LedgerId field value
func (o *WalletCheckoutPlusResponseData) GetLedgerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LedgerId
}

// GetLedgerIdOk returns a tuple with the LedgerId field value
// and a boolean to check if the value has been set.
func (o *WalletCheckoutPlusResponseData) GetLedgerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LedgerId, true
}

// SetLedgerId sets field value
func (o *WalletCheckoutPlusResponseData) SetLedgerId(v string) {
	o.LedgerId = v
}

func (o WalletCheckoutPlusResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletCheckoutPlusResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["amount"] = o.Amount
	toSerialize["description"] = o.Description
	toSerialize["type"] = o.Type
	if !IsNil(o.TransactionId) {
		toSerialize["transactionId"] = o.TransactionId
	}
	toSerialize["transactionOrderId"] = o.TransactionOrderId
	toSerialize["ledgerId"] = o.LedgerId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WalletCheckoutPlusResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"createdAt",
		"amount",
		"description",
		"type",
		"transactionOrderId",
		"ledgerId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWalletCheckoutPlusResponseData := _WalletCheckoutPlusResponseData{}

	err = json.Unmarshal(data, &varWalletCheckoutPlusResponseData)

	if err != nil {
		return err
	}

	*o = WalletCheckoutPlusResponseData(varWalletCheckoutPlusResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "description")
		delete(additionalProperties, "type")
		delete(additionalProperties, "transactionId")
		delete(additionalProperties, "transactionOrderId")
		delete(additionalProperties, "ledgerId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWalletCheckoutPlusResponseData struct {
	value *WalletCheckoutPlusResponseData
	isSet bool
}

func (v NullableWalletCheckoutPlusResponseData) Get() *WalletCheckoutPlusResponseData {
	return v.value
}

func (v *NullableWalletCheckoutPlusResponseData) Set(val *WalletCheckoutPlusResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletCheckoutPlusResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletCheckoutPlusResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletCheckoutPlusResponseData(val *WalletCheckoutPlusResponseData) *NullableWalletCheckoutPlusResponseData {
	return &NullableWalletCheckoutPlusResponseData{value: val, isSet: true}
}

func (v NullableWalletCheckoutPlusResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletCheckoutPlusResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


