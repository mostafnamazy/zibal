/*
Zibal API

Combined API for Zibal Gateway and Facilities (Verification, Wallet, etc.)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zibal

import (
	"encoding/json"
	"fmt"
)

// checks if the ShahkarInquiryResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShahkarInquiryResponseData{}

// ShahkarInquiryResponseData struct for ShahkarInquiryResponseData
type ShahkarInquiryResponseData struct {
	Matched bool `json:"matched"`
	AdditionalProperties map[string]interface{}
}

type _ShahkarInquiryResponseData ShahkarInquiryResponseData

// NewShahkarInquiryResponseData instantiates a new ShahkarInquiryResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShahkarInquiryResponseData(matched bool) *ShahkarInquiryResponseData {
	this := ShahkarInquiryResponseData{}
	this.Matched = matched
	return &this
}

// NewShahkarInquiryResponseDataWithDefaults instantiates a new ShahkarInquiryResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShahkarInquiryResponseDataWithDefaults() *ShahkarInquiryResponseData {
	this := ShahkarInquiryResponseData{}
	return &this
}

// GetMatched returns the Matched field value
func (o *ShahkarInquiryResponseData) GetMatched() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Matched
}

// GetMatchedOk returns a tuple with the Matched field value
// and a boolean to check if the value has been set.
func (o *ShahkarInquiryResponseData) GetMatchedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Matched, true
}

// SetMatched sets field value
func (o *ShahkarInquiryResponseData) SetMatched(v bool) {
	o.Matched = v
}

func (o ShahkarInquiryResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShahkarInquiryResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["matched"] = o.Matched

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ShahkarInquiryResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"matched",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varShahkarInquiryResponseData := _ShahkarInquiryResponseData{}

	err = json.Unmarshal(data, &varShahkarInquiryResponseData)

	if err != nil {
		return err
	}

	*o = ShahkarInquiryResponseData(varShahkarInquiryResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "matched")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableShahkarInquiryResponseData struct {
	value *ShahkarInquiryResponseData
	isSet bool
}

func (v NullableShahkarInquiryResponseData) Get() *ShahkarInquiryResponseData {
	return v.value
}

func (v *NullableShahkarInquiryResponseData) Set(val *ShahkarInquiryResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableShahkarInquiryResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableShahkarInquiryResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShahkarInquiryResponseData(val *ShahkarInquiryResponseData) *NullableShahkarInquiryResponseData {
	return &NullableShahkarInquiryResponseData{value: val, isSet: true}
}

func (v NullableShahkarInquiryResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShahkarInquiryResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


